#!/bin/bash

# latexit v3
# ks feb 24 2022

name='latexit'
here=$(pwd)
base=${here}/${name}

color='black'
saveas=./${name}.png
verbose='false'
quality=10
height=36
expression=""

print_usage(){
  echo 'usage: latexit [-c <color>] [-s <save as...>] [-v] [-q <quality>] [-H <height>] -e "<expression>"'
  echo 'hints:'
  echo '  color names are provided with xcolor package'
  echo "  color shading is possible but should be entered with a single quotation: 'green!50!black'"
  echo '  verbose flag has no effect at the moment'
  echo 'default options:'
  echo "  color is ${color}"
  echo "  save location is ${saveas}"
  echo "  verbose is ${verbose}"
  echo "  quality is ${quality}"
  echo "  height is ${height}"
}

print_options(){
  echo 'current options are as follows:'
  echo "  color is ${color}"
  echo "  save as... path is ${saveas}"
  echo "  verbose is ${verbose}"
  echo "  quality is ${quality}"
  echo "  height is ${height}"
  echo "  expression is ${expression}"
}

while getopts 'c:s:vq:H:e:' flag
do
  case "${flag}" in
    c) color="${OPTARG}" ;;
    s) saveas="${OPTARG}" ;;
    v) verbose='true' ;;
    q) quality="${OPTARG}" ;;
    H) height="${OPTARG}" ;;
    e) expression="${OPTARG}" ;;
    *) echo 'run: latexit'
       exit 1 ;;
  esac
done

if [[ ! $@ =~ ^\-.+ ]]
then
  print_usage
elif [[ "$@" != *"-e"* ]]
then
  echo 'error: missing flag -- e'
else
  # prepare the tex file
  cat > ${base}.tex <<EOL
    \documentclass{standalone}
    \usepackage{amsmath,amssymb,mathrsfs,slashed,bm,xcolor}
    \def\pp#1{\left( #1 \right)}
    \def\bb#1{\left[ #1 \right]}
    \def\cc#1{\left\{ #1 \right\}}
    \def\vv#1{\left\vert #1 \right\vert}
    \def\bra#1{\langle #1 \vert}
    \def\ket#1{\vert #1 \rangle}
    \def\pmat#1{\begin{pmatrix}#1\end{pmatrix}}
    \def\bmat#1{\begin{bmatrix}#1\end{bmatrix}}
    \def\vmat#1{\begin{vmatrix}#1\end{vmatrix}}
    \def\del{\partial}
    \def\Lag{\mathscr L}
    \def\Mt{\mathscr M}
    \def\nn{\nonumber \\\\ &}
    \DeclareMathOperator{\sech}{sech}
    \def\vec#1{\bm{\mathrm{#1}}}
    \def\hvec#1{\hat{\bm{\mathrm{#1}}}}
    \def\vvec#1{\vv{\bm{\mathrm{#1}}}}
    \DeclareMathOperator{\re}{\mathrm{Re}}
    \DeclareMathOperator{\im}{\mathrm{Im}}
    \DeclareMathOperator{\tr}{\mathrm{tr}}
    \DeclareMathOperator{\diag}{\mathrm{diag}}
    \DeclareMathOperator{\var}{\mathrm{var}}
    \def\doublevec#1{\stackrel{\leftrightarrow}{#1}}
    \def\d{\mathop{}\!\mathrm{d}}
    \def\D#1{\mathop{}\!\mathrm{d^#1}}
    \def\e{\mathop{}\!\mathrm{e}}
    \def\I{\mathop{}\!\mathrm{i}}
    \begin{document}
EOL

  echo "\color{${color}}" >> ${base}.tex
  echo '$\displaystyle' >> ${base}.tex
  echo '\begin{aligned}' >> ${base}.tex
  echo "${expression}" >> ${base}.tex
  echo '\end{aligned}' >> ${base}.tex
  echo '$' >> ${base}.tex
  echo '\end{document}' >> ${base}.tex
  
  # list options
  print_options
  
  # compile the tex file to dvi
  latex -halt-on-error -shell-escape ${base}.tex 1> ${base}.stdout 2> ${base}.stderr

  if grep -q 'No pages of output.' ${base}.stderr
  then
    echo 'error: check syntax'
    echo "  ${expression}"
  else
    # convert dvi to eps
    dvips -E -o ${base}.eps ${base}.dvi 1>> ${base}.stdout 2>> ${base}.stderr

    # convert eps to png
    convert -density $(echo "${quality} * 100" | bc -l) ${base}.eps ${base}.png &> /dev/null
    
    # trim white spaces
    convert ${base}.png -trim ${base}.png &> /dev/null
    
    # resize to height
    convert -resize x${height} ${base}.png ${base}.png &> /dev/null
 
    # remove leftovers
    rm ${base}.aux ${base}.dvi ${base}.log ${base}.tex ${base}.stdout ${base}.stderr ${base}.eps
  
    # save the output as
    mv ${base}.png ${saveas} &> /dev/null

    # copy png to clipboard
    xclip -selection clipboard -t image/png -i ${base}.png
  fi
fi
